{"ts":1348141767089,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\n#include <errno.h>\n#include <poll.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <signal.h>\n#include <unistd.h>\n\n#include <sys/ioctl.h>\n#include <sys/socket.h>\n#include <sys/un.h>\n\n#include \"command.h\"\n\n\n#define SERVER_PATH \"/tmp/runjs.sock\"\n\n#define USE(x) (void) (x)\n#define UNREACHABLE() abort()\n\n\nvoid fatal_error(const char* message) {\n  perror(message);\n  exit(1);\n}\n\n\nstatic int create_server(const char* path) {\n  int fd;\n  size_t len;\n  struct sockaddr_un addr;\n  \n  fd = socket(AF_UNIX, SOCK_STREAM, 0);\n  if (fd < 0)\n    return -1;\n    \n  if (ioctl(fd, FIOCLEX, NULL) < 0)\n    goto error;\n\n  len = strlen(path);\n  if (len >= sizeof addr.sun_path) {\n    errno = ENAMETOOLONG;\n    goto error;\n  }\n  \n  addr.sun_family = AF_UNIX;\n  memcpy(addr.sun_path, path, len + 1);  \n   \n  unlink(path);\n      \n  if (bind(fd, (struct sockaddr*) &addr, sizeof addr) < 0)\n    goto error;\n    \n  if (listen(fd, 1024) < 0)\n    goto error;\n    \n  return fd;  \n  \n error:\n  close(fd);\n  return -1;\n}\n\n\nint main(int argc, char* argv[]) {\n  int server_fd;\n\n  USE(argc);\n  USE(argv);\n  \n  signal(SIGPIPE, SIG_IGN);\n  \n  server_fd = create_server(SERVER_PATH);\n  if (server_fd < 0)\n    fatal_error(\"create_server\");\n   \n  if (rjs_run(server_fd))\n    fatal_error(\"rjs_monitor\");\n     \n  UNREACHABLE();\n}\n\n\n"]],"start1":0,"start2":0,"length1":0,"length2":1316}]],"length":1316}
