{"ts":1348088062592,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\r\n/*\r\n * Copyright (C) Igor Sysoev\r\n */\r\n\r\n\r\n#ifndef NGX_QUEUE_H_INCLUDED_\r\n#define NGX_QUEUE_H_INCLUDED_\r\n\r\n\r\ntypedef struct ngx_queue_s  ngx_queue_t;\r\n\r\nstruct ngx_queue_s {\r\n    ngx_queue_t  *prev;\r\n    ngx_queue_t  *next;\r\n};\r\n\r\n\r\n#define ngx_queue_init(q)                                                     \\\r\n    (q)->prev = q;                                                            \\\r\n    (q)->next = q\r\n\r\n\r\n#define ngx_queue_empty(h)                                                    \\\r\n    (h == (h)->prev)\r\n\r\n\r\n#define ngx_queue_insert_head(h, x)                                           \\\r\n    (x)->next = (h)->next;                                                    \\\r\n    (x)->next->prev = x;                                                      \\\r\n    (x)->prev = h;                                                            \\\r\n    (h)->next = x\r\n\r\n\r\n#define ngx_queue_insert_after   ngx_queue_insert_head\r\n\r\n\r\n#define ngx_queue_insert_tail(h, x)                                           \\\r\n    (x)->prev = (h)->prev;                                                    \\\r\n    (x)->prev->next = x;                                                      \\\r\n    (x)->next = h;                                                            \\\r\n    (h)->prev = x\r\n\r\n\r\n#define ngx_queue_head(h)                                                     \\\r\n    (h)->next\r\n\r\n\r\n#define ngx_queue_last(h)                                                     \\\r\n    (h)->prev\r\n\r\n\r\n#define ngx_queue_sentinel(h)                                                 \\\r\n    (h)\r\n\r\n\r\n#define ngx_queue_next(q)                                                     \\\r\n    (q)->next\r\n\r\n\r\n#define ngx_queue_prev(q)                                                     \\\r\n    (q)->prev\r\n\r\n\r\n#if defined(NGX_DEBUG)\r\n\r\n#define ngx_queue_remove(x)                                                   \\\r\n    (x)->next->prev = (x)->prev;                                              \\\r\n    (x)->prev->next = (x)->next;                                              \\\r\n    (x)->prev = NULL;                                                         \\\r\n    (x)->next = NULL\r\n\r\n#else\r\n\r\n#define ngx_queue_remove(x)                                                   \\\r\n    (x)->next->prev = (x)->prev;                                              \\\r\n    (x)->prev->next = (x)->next\r\n\r\n#endif\r\n\r\n\r\n#define ngx_queue_split(h, q, n)                                              \\\r\n    (n)->prev = (h)->prev;                                                    \\\r\n    (n)->prev->next = n;                                                      \\\r\n    (n)->next = q;                                                            \\\r\n    (h)->prev = (q)->prev;                                                    \\\r\n    (h)->prev->next = h;                                                      \\\r\n    (q)->prev = n;\r\n\r\n\r\n#define ngx_queue_add(h, n)                                                   \\\r\n    (h)->prev->next = (n)->next;                                              \\\r\n    (n)->next->prev = (h)->prev;                                              \\\r\n    (h)->prev = (n)->prev;                                                    \\\r\n    (h)->prev->next = h;\r\n\r\n\r\n#define ngx_queue_data(q, type, link)                                         \\\r\n    (type *) ((unsigned char *) q - offsetof(type, link))\r\n\r\n\r\n#define ngx_queue_foreach(q, h)                                               \\\r\n    for ((q) = ngx_queue_head(h);                                             \\\r\n         (q) != ngx_queue_sentinel(h);                                        \\\r\n         (q) = ngx_queue_next(q))\r\n\r\n\r\n#endif /* NGX_QUEUE_H_INCLUDED_ */\r\n"]],"start1":0,"start2":0,"length1":0,"length2":3693}]],"length":3693}
